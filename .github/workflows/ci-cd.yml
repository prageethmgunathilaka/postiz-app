name: Docker Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated)'
        required: false
        default: 'backend,frontend,workers'
        type: string

env:
  REGISTRY: gcr.io
  PROJECT_ID: postiz-mcp-20250929
  REGION: us-central1

jobs:

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [backend, frontend, workers]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          # Set production environment variables
          export NODE_ENV=production
          export PORT=3001
          export FRONTEND_URL=https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app
          export MAIN_URL=https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app
          export NEXT_PUBLIC_BACKEND_URL=https://backend-${{ env.PROJECT_ID }}-uc.a.run.app
          export BACKEND_INTERNAL_URL=https://backend-${{ env.PROJECT_ID }}-uc.a.run.app
          
          # Build and push image
          docker build -f Dockerfile.${{ matrix.service }} \
            --build-arg NODE_ENV=$NODE_ENV \
            --build-arg PORT=$PORT \
            --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --build-arg REDIS_URL="${{ secrets.REDIS_URL }}" \
            --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --build-arg FRONTEND_URL=$FRONTEND_URL \
            --build-arg MAIN_URL=$MAIN_URL \
            --build-arg NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL \
            --build-arg BACKEND_INTERNAL_URL=$BACKEND_INTERNAL_URL \
            --build-arg TZ=UTC \
            --build-arg STORAGE_PROVIDER=local \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:latest \
            .
          
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:latest

  # Deploy to Google Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [backend, frontend, workers]
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          # Set production environment variables
          export NODE_ENV=production
          export PORT=3001
          export FRONTEND_URL=https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app
          export MAIN_URL=https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app
          export NEXT_PUBLIC_BACKEND_URL=https://backend-${{ env.PROJECT_ID }}-uc.a.run.app
          export BACKEND_INTERNAL_URL=https://backend-${{ env.PROJECT_ID }}-uc.a.run.app
          export OAUTH_GITHUB_CLIENT_ID="${{ secrets.OAUTH_GITHUB_CLIENT_ID }}"
          export OAUTH_GITHUB_CLIENT_SECRET="${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}"
          
          # Deploy to Cloud Run
          gcloud run deploy ${{ matrix.service }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port $PORT \
            --set-env-vars "NODE_ENV=$NODE_ENV,PORT=$PORT,TZ=UTC,STORAGE_PROVIDER=local" \
            --set-env-vars "FRONTEND_URL=$FRONTEND_URL,MAIN_URL=$MAIN_URL" \
            --set-env-vars "NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL,BACKEND_INTERNAL_URL=$BACKEND_INTERNAL_URL" \
            --set-env-vars "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars "REDIS_URL=${{ secrets.REDIS_URL }}" \
            --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --set-env-vars "OAUTH_GITHUB_CLIENT_ID=$OAUTH_GITHUB_CLIENT_ID" \
            --set-env-vars "OAUTH_GITHUB_CLIENT_SECRET=$OAUTH_GITHUB_CLIENT_SECRET"

  # Health check after deployment
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Check backend health
        run: |
          BACKEND_URL="https://backend-${{ env.PROJECT_ID }}-uc.a.run.app"
          curl -f $BACKEND_URL/health || exit 1
      
      - name: Check frontend health
        run: |
          FRONTEND_URL="https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app"
          curl -f $FRONTEND_URL || exit 1
