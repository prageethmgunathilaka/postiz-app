name: Docker Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated)'
        required: false
        default: 'backend,frontend,workers'
        type: string

env:
  REGISTRY: gcr.io
  PROJECT_ID: postiz-473617
  REGION: us-central1
  SERVICE_NAME: postiz

jobs:

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [backend, frontend, workers]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker
          gcloud auth configure-docker gcr.io

      - name: Build and push Docker image
        run: |
          # Build and push image (Dockerfiles are self-contained with hardcoded env vars)
          docker build -f Dockerfile.${{ matrix.service }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:latest \
            .
          
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:latest

  # Deploy to Google Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [backend, frontend, workers]
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Database Schema (Backend only)
        if: matrix.service == 'backend'
        run: |
          # Install Node.js and pnpm
          curl -fsSL https://get.pnpm.io/install.sh | sh -
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:$PATH"
          
          # Install dependencies
          pnpm install
          
          # Push database schema
          pnpm run prisma-db-push

      - name: Deploy to Cloud Run
        run: |
          # Deploy to Cloud Run with environment variables that override Dockerfile defaults
          gcloud run deploy ${{ matrix.service }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port ${{ matrix.service == 'frontend' && '3000' || matrix.service == 'backend' && '3001' || '3003' }} \
            --set-env-vars "NODE_ENV=production,TZ=UTC,STORAGE_PROVIDER=local" \
            --set-env-vars "FRONTEND_URL=https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app" \
            --set-env-vars "MAIN_URL=https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app" \
            --set-env-vars "NEXT_PUBLIC_BACKEND_URL=https://backend-${{ env.PROJECT_ID }}-uc.a.run.app" \
            --set-env-vars "BACKEND_INTERNAL_URL=https://backend-${{ env.PROJECT_ID }}-uc.a.run.app" \
            --set-env-vars "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars "REDIS_URL=${{ secrets.REDIS_URL }}" \
            --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --set-env-vars "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" \
            --set-env-vars "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}"

  # Health check after deployment
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Check services health
        run: |
          # Backend is accessed through gateway, so we check the frontend which should proxy to backend
          FRONTEND_URL="https://frontend-${{ env.PROJECT_ID }}-uc.a.run.app"
          curl -f $FRONTEND_URL || exit 1
