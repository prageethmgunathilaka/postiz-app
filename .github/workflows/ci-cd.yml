name: Docker Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      services:
        description: 'Services to deploy (comma-separated)'
        required: false
        default: 'backend,frontend,workers'
        type: string

env:
  REGISTRY: gcr.io
  PROJECT_ID: postiz-mcp-20250929
  REGION: us-central1

jobs:

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [backend, frontend, workers]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.${{ matrix.service }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-${{ matrix.service }}:latest

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy Backend to Staging
        run: |
          gcloud run deploy postiz-backend-staging \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-backend:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3001 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 5 \
            --set-env-vars NODE_ENV=staging,PORT=3001,FRONTEND_URL=https://postiz-frontend-staging-1025161041601.us-central1.run.app,DATABASE_URL=${{ secrets.DATABASE_URL }},REDIS_URL=${{ secrets.REDIS_URL }},JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --quiet

      - name: Deploy Frontend to Staging
        run: |
          gcloud run deploy postiz-frontend-staging \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-frontend:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 3 \
            --set-env-vars NODE_ENV=staging,PORT=3000,NEXT_PUBLIC_BACKEND_URL=https://postiz-backend-staging-1025161041601.us-central1.run.app \
            --quiet

      - name: Deploy Workers to Staging
        run: |
          gcloud run deploy postiz-workers-staging \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-workers:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3003 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 2 \
            --set-env-vars NODE_ENV=staging,PORT=3003,DATABASE_URL=${{ secrets.DATABASE_URL }},REDIS_URL=${{ secrets.REDIS_URL }} \
            --quiet

      - name: Get service URLs
        run: |
          echo "## ðŸš€ Staging Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: https://postiz-backend-staging-1025161041601.us-central1.run.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: https://postiz-frontend-staging-1025161041601.us-central1.run.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Workers**: https://postiz-workers-staging-1025161041601.us-central1.run.app" >> $GITHUB_STEP_SUMMARY

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy Backend to Production
        run: |
          gcloud run deploy postiz-backend \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-backend:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3001 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production,PORT=3001,FRONTEND_URL=https://postiz-frontend-1025161041601.us-central1.run.app,GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }},GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }},DATABASE_URL=${{ secrets.DATABASE_URL }},REDIS_URL=${{ secrets.REDIS_URL }},JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --quiet

      - name: Deploy Frontend to Production
        run: |
          gcloud run deploy postiz-frontend \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-frontend:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --set-env-vars NODE_ENV=production,PORT=3000,NEXT_PUBLIC_BACKEND_URL=https://postiz-backend-1025161041601.us-central1.run.app \
            --quiet

      - name: Deploy Workers to Production
        run: |
          gcloud run deploy postiz-workers \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/postiz-workers:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3003 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 3 \
            --set-env-vars NODE_ENV=production,PORT=3003,DATABASE_URL=${{ secrets.DATABASE_URL }},REDIS_URL=${{ secrets.REDIS_URL }} \
            --quiet

      - name: Get service URLs
        run: |
          echo "## ðŸš€ Production Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: https://postiz-backend-1025161041601.us-central1.run.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: https://postiz-frontend-1025161041601.us-central1.run.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Workers**: https://postiz-workers-1025161041601.us-central1.run.app" >> $GITHUB_STEP_SUMMARY

  # Health check after deployment
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Health Check Staging
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "Checking staging services..."
          curl -f https://postiz-backend-staging-1025161041601.us-central1.run.app/health || echo "Backend health check failed"
          curl -f https://postiz-frontend-staging-1025161041601.us-central1.run.app || echo "Frontend health check failed"

      - name: Health Check Production
        if: needs.deploy-production.result == 'success'
        run: |
          echo "Checking production services..."
          curl -f https://postiz-backend-1025161041601.us-central1.run.app/health || echo "Backend health check failed"
          curl -f https://postiz-frontend-1025161041601.us-central1.run.app || echo "Frontend health check failed"